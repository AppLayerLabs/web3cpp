#ifndef TESTS_H
#define TESTS_H

#include <chrono>
#include <ctime>
#include <fstream>
#include <future>
#include <iostream>
#include <string>
#include <vector>

#include <web3cpp/Web3.h>

/**
 * Helper class for unit testing.
 * Each test should be completely contained into a function of its own.
 */

class Tests {
  private:
    // Password for the wallet and log stream object for writing test processes
    std::string password;
    std::ofstream logStream;

    // Log file name and test wallet folder name
    std::string logFile = "web3cpp-test-log.txt";
    std::string walletFolder = "web3cpp-test-wallet";

    // Counters for passed/failed tests, error reason (if any),
    // and functions for controlling those
    int pass = 0;
    int fail = 0;
    bool curPass;
    std::string curReason;
    void passed() { curPass = true; curReason = ""; pass++; }
    void failed(std::string msg) { curPass = false; curReason = msg; fail++; }

  public:
    // The Web3 object that will be tested
    Web3* web3 = NULL;

    // Constructor
    Tests(std::string &password) {
      std::cout << "Creating/Loading wallet..." << std::endl;
      web3 = new Web3(walletFolder);
      Error error;
      if (!web3->wallet.loadWallet(password, error)) {
        std::cout << std::string("Could not load wallet: ") << error.what() << std::endl;
        throw;
      }
      this->password = password;
      std::cout << "Wallet created/loaded, starting tests" << std::endl
        << "----------------------------------------" << std::endl;
      logStream.open(logFile, std::ofstream::out | std::ofstream::app);
      std::time_t t = std::time(nullptr);
      std::tm* tm = std::localtime(&t);
      std::stringstream timestream;
      timestream << std::put_time(tm, "%d-%m-%Y %H-%M-%S");
      logStream << "[web3cpp Test Log - " << timestream.str() << "]\n\n";
    }

    // Destructor
    ~Tests() { logStream.close(); delete web3; }

    // Show overall test results
    void showResults() {
      std::cout << "----------------------------------------\n"
        << "* RESULTS: " << pass << " passed, " << fail << " failed\n"
        << "* Check the log file " << logFile << " for details\n"
        << "----------------------------------------\n";
    }

    /**
     * Test for valid Account generation.
     * Addresses are automatically converted to lowercase during testing.
     * Created test Account is automatically deleted at the end of the test.
     * Required inputs:
     * - A derivation path
     * - A seedphrase to use for generating the address
     * - A name for the Account
     * - An example address generated by said seedphrase for comparison
     * Fails in the following conditions:
     * - Account is not properly created
     * - Account created doesn't match the example
     */
    void generateAccount(
      std::string derivPath, std::string seed, std::string name, std::string example
    ) {
      std::cout << "* Running test: " << __func__ << "... " << std::flush;
      Error error;
      example = Utils::toLowercaseAddress(example);
      std::string result = Utils::toLowercaseAddress(web3->wallet.createAccount(
        derivPath, this->password, name, error, seed
      ));

      if (result == "0x") failed(error.what());
      else if (result != example) failed("Accounts don't match");
      else passed();

      web3->wallet.deleteAccount(result);
      std::cout << ((curPass) ? "PASSED" : "FAILED") << std::endl;
      logStream << "* Test: " << __func__ << std::endl
        << "* Derivation path: " << derivPath << std::endl
        << "* Seed: " << seed << std::endl
        << "* Name: " << name << std::endl
        << "* Example: " << example << std::endl
        << "* Output: " << result << std::endl
        << "* Test result: " <<
          ((curPass) ? "PASSED" : "FAILED - " + curReason)
        << std::endl << std::endl;
      return;
    }
};

#endif // TESTS_H
